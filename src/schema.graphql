# import Group from "./generated/prisma.graphql"
# import Expense from "./generated/prisma.graphql"
# import Split from "./generated/prisma.graphql"

type Query {
  me: User
  users(name_contains: String, email: String): [User!]
  user(email: String!): User
  group(id: ID!): Group
  expense(id: ID!): Expense
  split(id: ID!): Split
  groups(author: ID, title_contains: String): [Group!]!
  expenses(groupid: ID!): [Expense!]!
  splits(expenseId: ID!): [Split!]!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  addFriend(id: ID!): User!
  removeFriend(id: ID!): User!

  createGroup(input: CreateGroupInput!): Group!
  modifyGroupTitle(id: ID!, title: String!): Group!
  modifyGroupParticipants(input: ModifyGroupParticipantsInput!): Group!
  joinGroup(id: ID!): Group!
  leaveGroup(id: ID!): Group!
  deleteGroup(id: ID!): Group!

  createExpense(input: CreateExpenseInput!): Expense!
  deleteExpense(id: ID!): Expense!
  modifyExpense(input: ModifyExpenseInput!): Expense!

  createSplit(input: CreateSplitInput!): Split!
  modifySplit(input: ModifySplitInput!): Split!
}

input CreateGroupInput {
  title: String!
  participants: [ID!]!
}

input ModifyGroupParticipantsInput {
  groupId: ID!
  add: Boolean!
  participants: [ID!]!
}

input CreateExpenseInput {
  groupId: ID!
  title: String!
}

input ModifyExpenseInput {
  title: String!
  expenseId: ID!
}

input CreateSplitInput {
  amount: Int!
  expenseId: ID!
}

input ModifySplitInput {
  amount: Int!
  splitId: ID!
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  email: String!
  name: String!
  avatar: String
  groups: [Group!]!
  friends: [User!]!
}
